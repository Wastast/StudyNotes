1.词法作用域的概念：词法作用域就是定义在词法分析阶段的作用域，根据程序员在写代码时将变量和块级作用域放在何处决定的，大多数时候是不会发生变化的
                  无论函数在哪里被调用，如何被调用，函数作用域也不会改变，根据函数被声明时所处的位置决定
2.遮蔽效应: 外层函数嵌套了一个内层函数，当外层函数的某一个变量名和内层函数的某一个变量名发生冲突的时候，根据引擎的查找功能产生了遮蔽效应
            当发生变量使用的时候，引擎会自动进行RHS查询，查询变量是什么值，在查询时，引擎并不是查询出所有跟该变量信息，而是根据需要查找到
            第一处的时候就进行返回，如果内层函数的变量名和外层函数的变量名一致的时候，引擎查找在内层函数查找时就会停止，不会再向外查找
            这时候就会造成遮蔽效应，内层函数的变量引用遮蔽了外层函数的变量引用。如果外层函数是全局作用域时，可以通过window.xx来逃避遮蔽效应
3.eval()和with(): 这两个函数可以达到欺骗词法作用域的效果，eval()可以改变词法作用域的范围，with()会创造一个全新的词法作用域，with()还有一个致命的
                  缺点，当with()找不到相同的变量时，会在全局作用域范围上，创建一个全局变量，污染全局环境
4.关于JavaScript的性能问题: JavaScript 引擎会在编译阶段进行数项的性能优化，有些优化能够根据代码的词法进行静态分析，并预先确定所有变量和函数的定义位置
                            方便能够在程序执行过程中，快速的找到标识符。而eval()和with()的使用会破坏词法作用域的生成，因为eval()和with()都会动态的
                            产生词法作用域，这样javascript引擎在解析的时候就因为不清楚这两个函数里具有什么样的作用域，而进行简单而模糊的解析。造成后面
                            使用的时候需要重新解析一次作用域，从而造成性能上的浪费
